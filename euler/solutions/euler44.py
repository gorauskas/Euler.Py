# -*- coding: utf-8 -*-

from euler.baseeuler import BaseEuler
from math import sqrt


class Euler(BaseEuler):
    def __init__(self):
        self._penta_lst = list(map(lambda x: x * (3 * x - 1) / 2,
                                   range(1, 100000)))

    def _is_penta(self, num):
        return (((sqrt(24.0 * num + 1.0) + 1.0) / 6.0) % 1.0) == 0

    def solve(self):
        for n in range(1, 2500):
            for m in range(1, n):
                i = self._penta_lst[n]
                j = self._penta_lst[m]
                if self._is_penta(i + j) and self._is_penta(i - j):
                    return i - j

    @property
    def answer(self):
        return ('The value of D is %d' %
                self.solve())

    @property
    def problem(self):
        return '''
Project Euler Problem 44

    Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first
    ten pentagonal numbers are:

        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
    70 ? 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
    difference are pentagonal and D = |Pk ? Pj| is minimised; what is the value
    of D?
'''
