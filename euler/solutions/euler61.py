# -*- coding: utf-8 -*-

from euler.baseeuler import BaseEuler
import itertools as iter


class Euler(BaseEuler):
    def __init__(self):
        self._funcs = [self._tri, self._sqr, self._pnt, self._hex,
                       self._hep, self._oct]
        self._a = [[], [], [], [], [], []]

    def solve(self):
        for i in range(10, 1000):
            for j in range(6):
                x = int(self._funcs[j](i))
                if x > 9999:
                    break
                if x > 999:
                    self._a[j].append(x)

        # all permutations of the poly num order after first
        p = iter.permutations([1, 2, 3, 4, 5])
        perms = [pp for pp in p]

        for n in self._a[0]:
            for combo in perms:
                g = self._is_cyclic(1, combo, [n, 0, 0, 0, 0, 0], self._a,
                                    str(n)[:2], n)
                if 0 not in g:
                    return sum(g)

    def _is_cyclic(self, idx, c, ans, ar, o, p):
        '''
        recursively check if the number is cyclic
        '''
        r = str(p)[2:]  # rear
        i = c[0]

        if idx == 5:
            e = int(r + o)  # end
            if e in ar[i]:
                ans[idx] = e

        for n in ar[i]:
            if idx < 5:
                f = str(n)[:2]  # front
                if f == r:  # front equals rear
                    ans[idx] = n
                    self._is_cyclic(idx + 1, c[1:], ans, ar, o, n)

        return ans

    def _tri(self, n):
        return n * (n + 1) / 2

    def _sqr(self, n):
        return n ** 2

    def _pnt(self, n):
        return n * (3 * n - 1) / 2

    def _hex(self, n):
        return n * (2 * n - 1)

    def _hep(self, n):
        return n * (5 * n - 3) / 2

    def _oct(self, n):
        return n * (3 * n - 2)

    @property
    def answer(self):
        return ('The sum of the only ordered set of six cyclic 4-digit\n' +
                'numbers for which each polygonal type is represented\n' +
                'by a different number in the set is %d.' % self.solve())

    @property
    def problem(self):
        return '''
Project Euler Problem 61

    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
    are all figurate (polygonal) numbers and are generated by the following
    formulae:

        Triangle                P3,n=n(n+1)/2           1, 3, 6, 10, 15, ...
        Square                  P4,n=n2                 1, 4, 9, 16, 25, ...
        Pentagonal              P5,n=n(3n−1)/2          1, 5, 12, 22, 35, ...
        Hexagonal               P6,n=n(2n−1)            1, 6, 15, 28, 45, ...
        Heptagonal              P7,n=n(5n−3)/2          1, 7, 18, 34, 55, ...
        Octagonal               P8,n=n(3n−2)            1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
    interesting properties.

    1) The set is cyclic, in that the last two digits of each number is the
       first two digits of the next number (including the last number with the
       first).

    2) Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
       pentagonal (P5,44=2882), is represented by a different number in the
       set.

    3) This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for
    which each polygonal type: triangle, square, pentagonal, hexagonal,
    heptagonal, and octagonal, is represented by a different number in the set.
'''
